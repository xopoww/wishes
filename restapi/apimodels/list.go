// Code generated by go-swagger; DO NOT EDIT.

package apimodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// List list
//
// swagger:model List
type List struct {

	// access
	// Required: true
	// Enum: [private link public]
	Access *string `json:"access"`

	// owner ID
	OwnerID int64 `json:"ownerID,omitempty"`

	// title
	// Required: true
	// Min Length: 1
	Title *string `json:"title"`
}

// Validate validates this list
func (m *List) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listTypeAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["private","link","public"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listTypeAccessPropEnum = append(listTypeAccessPropEnum, v)
	}
}

const (

	// ListAccessPrivate captures enum value "private"
	ListAccessPrivate string = "private"

	// ListAccessLink captures enum value "link"
	ListAccessLink string = "link"

	// ListAccessPublic captures enum value "public"
	ListAccessPublic string = "public"
)

// prop value enum
func (m *List) validateAccessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listTypeAccessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *List) validateAccess(formats strfmt.Registry) error {

	if err := validate.Required("access", "body", m.Access); err != nil {
		return err
	}

	// value enum
	if err := m.validateAccessEnum("access", "body", *m.Access); err != nil {
		return err
	}

	return nil
}

func (m *List) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	if err := validate.MinLength("title", "body", *m.Title, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list based on context it is used
func (m *List) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *List) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *List) UnmarshalBinary(b []byte) error {
	var res List
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
