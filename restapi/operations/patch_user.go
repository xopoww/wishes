// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/xopoww/wishes/models"
)

// PatchUserHandlerFunc turns a function with the right signature into a patch user handler
type PatchUserHandlerFunc func(PatchUserParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchUserHandlerFunc) Handle(params PatchUserParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// PatchUserHandler interface for that can handle valid patch user params
type PatchUserHandler interface {
	Handle(PatchUserParams, *models.Principal) middleware.Responder
}

// NewPatchUser creates a new http.Handler for the patch user operation
func NewPatchUser(ctx *middleware.Context, handler PatchUserHandler) *PatchUser {
	return &PatchUser{Context: ctx, Handler: handler}
}

/*
	PatchUser swagger:route PATCH /user patchUser

Edit user info
*/
type PatchUser struct {
	Context *middleware.Context
	Handler PatchUserHandler
}

func (o *PatchUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPatchUserParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PatchUserBody patch user body
//
// swagger:model PatchUserBody
type PatchUserBody struct {
	models.ID

	models.UserInfo
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatchUserBody) UnmarshalJSON(raw []byte) error {
	// PatchUserParamsBodyAO0
	var patchUserParamsBodyAO0 models.ID
	if err := swag.ReadJSON(raw, &patchUserParamsBodyAO0); err != nil {
		return err
	}
	o.ID = patchUserParamsBodyAO0

	// PatchUserParamsBodyAO1
	var patchUserParamsBodyAO1 models.UserInfo
	if err := swag.ReadJSON(raw, &patchUserParamsBodyAO1); err != nil {
		return err
	}
	o.UserInfo = patchUserParamsBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatchUserBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	patchUserParamsBodyAO0, err := swag.WriteJSON(o.ID)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patchUserParamsBodyAO0)

	patchUserParamsBodyAO1, err := swag.WriteJSON(o.UserInfo)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patchUserParamsBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patch user body
func (o *PatchUserBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ID
	if err := o.ID.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.UserInfo
	if err := o.UserInfo.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this patch user body based on the context it is used
func (o *PatchUserBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ID
	if err := o.ID.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.UserInfo
	if err := o.UserInfo.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PatchUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchUserBody) UnmarshalBinary(b []byte) error {
	var res PatchUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatchUserInternalServerErrorBody patch user internal server error body
//
// swagger:model PatchUserInternalServerErrorBody
type PatchUserInternalServerErrorBody struct {

	// error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this patch user internal server error body
func (o *PatchUserInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchUserInternalServerErrorBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("patchUserInternalServerError"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this patch user internal server error body based on context it is used
func (o *PatchUserInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchUserInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchUserInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PatchUserInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
