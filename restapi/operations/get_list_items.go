// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/xopoww/wishes/restapi/apimodels"
)

// GetListItemsHandlerFunc turns a function with the right signature into a get list items handler
type GetListItemsHandlerFunc func(GetListItemsParams, *apimodels.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn GetListItemsHandlerFunc) Handle(params GetListItemsParams, principal *apimodels.Principal) middleware.Responder {
	return fn(params, principal)
}

// GetListItemsHandler interface for that can handle valid get list items params
type GetListItemsHandler interface {
	Handle(GetListItemsParams, *apimodels.Principal) middleware.Responder
}

// NewGetListItems creates a new http.Handler for the get list items operation
func NewGetListItems(ctx *middleware.Context, handler GetListItemsHandler) *GetListItems {
	return &GetListItems{Context: ctx, Handler: handler}
}

/*
	GetListItems swagger:route GET /lists/{id}/items getListItems

Get list items
*/
type GetListItems struct {
	Context *middleware.Context
	Handler GetListItemsHandler
}

func (o *GetListItems) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetListItemsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *apimodels.Principal
	if uprinc != nil {
		principal = uprinc.(*apimodels.Principal) // this is really a apimodels.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetListItemsInternalServerErrorBody get list items internal server error body
//
// swagger:model GetListItemsInternalServerErrorBody
type GetListItemsInternalServerErrorBody struct {

	// error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this get list items internal server error body
func (o *GetListItemsInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetListItemsInternalServerErrorBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("getListItemsInternalServerError"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get list items internal server error body based on context it is used
func (o *GetListItemsInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetListItemsInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetListItemsInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetListItemsInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetListItemsOKBody get list items o k body
//
// swagger:model GetListItemsOKBody
type GetListItemsOKBody struct {
	apimodels.Revision

	// items
	Items []*GetListItemsOKBodyItemsItems0 `json:"items"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetListItemsOKBody) UnmarshalJSON(raw []byte) error {
	// GetListItemsOKBodyAO0
	var getListItemsOKBodyAO0 apimodels.Revision
	if err := swag.ReadJSON(raw, &getListItemsOKBodyAO0); err != nil {
		return err
	}
	o.Revision = getListItemsOKBodyAO0

	// GetListItemsOKBodyAO1
	var dataGetListItemsOKBodyAO1 struct {
		Items []*GetListItemsOKBodyItemsItems0 `json:"items"`
	}
	if err := swag.ReadJSON(raw, &dataGetListItemsOKBodyAO1); err != nil {
		return err
	}

	o.Items = dataGetListItemsOKBodyAO1.Items

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetListItemsOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getListItemsOKBodyAO0, err := swag.WriteJSON(o.Revision)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getListItemsOKBodyAO0)
	var dataGetListItemsOKBodyAO1 struct {
		Items []*GetListItemsOKBodyItemsItems0 `json:"items"`
	}

	dataGetListItemsOKBodyAO1.Items = o.Items

	jsonDataGetListItemsOKBodyAO1, errGetListItemsOKBodyAO1 := swag.WriteJSON(dataGetListItemsOKBodyAO1)
	if errGetListItemsOKBodyAO1 != nil {
		return nil, errGetListItemsOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetListItemsOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get list items o k body
func (o *GetListItemsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with apimodels.Revision
	if err := o.Revision.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetListItemsOKBody) validateItems(formats strfmt.Registry) error {

	if swag.IsZero(o.Items) { // not required
		return nil
	}

	for i := 0; i < len(o.Items); i++ {
		if swag.IsZero(o.Items[i]) { // not required
			continue
		}

		if o.Items[i] != nil {
			if err := o.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getListItemsOK" + "." + "items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getListItemsOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get list items o k body based on the context it is used
func (o *GetListItemsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with apimodels.Revision
	if err := o.Revision.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetListItemsOKBody) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Items); i++ {

		if o.Items[i] != nil {
			if err := o.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getListItemsOK" + "." + "items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getListItemsOK" + "." + "items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetListItemsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetListItemsOKBody) UnmarshalBinary(b []byte) error {
	var res GetListItemsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetListItemsOKBodyItemsItems0 get list items o k body items items0
//
// swagger:model GetListItemsOKBodyItemsItems0
type GetListItemsOKBodyItemsItems0 struct {
	apimodels.ID

	apimodels.ListItem
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetListItemsOKBodyItemsItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 apimodels.ID
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.ID = aO0

	// AO1
	var aO1 apimodels.ListItem
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	o.ListItem = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetListItemsOKBodyItemsItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(o.ID)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(o.ListItem)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get list items o k body items items0
func (o *GetListItemsOKBodyItemsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with apimodels.ID
	if err := o.ID.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with apimodels.ListItem
	if err := o.ListItem.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this get list items o k body items items0 based on the context it is used
func (o *GetListItemsOKBodyItemsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with apimodels.ID
	if err := o.ID.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with apimodels.ListItem
	if err := o.ListItem.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetListItemsOKBodyItemsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetListItemsOKBodyItemsItems0) UnmarshalBinary(b []byte) error {
	var res GetListItemsOKBodyItemsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
