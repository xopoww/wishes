// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewDeleteListItemsParams creates a new DeleteListItemsParams object
//
// There are no default values defined in the spec.
func NewDeleteListItemsParams() DeleteListItemsParams {

	return DeleteListItemsParams{}
}

// DeleteListItemsParams contains all the bound params for the delete list items operation
// typically these are obtained from a http.Request
//
// swagger:parameters DeleteListItems
type DeleteListItemsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: path
	*/
	ID int64
	/*
	  Required: true
	  In: query
	  Collection Format: csv
	*/
	Ids []int64
	/*
	  Required: true
	  In: query
	*/
	Rev int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewDeleteListItemsParams() beforehand.
func (o *DeleteListItemsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	qIds, qhkIds, _ := qs.GetOK("ids")
	if err := o.bindIds(qIds, qhkIds, route.Formats); err != nil {
		res = append(res, err)
	}

	qRev, qhkRev, _ := qs.GetOK("rev")
	if err := o.bindRev(qRev, qhkRev, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindID binds and validates parameter ID from path.
func (o *DeleteListItemsParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("id", "path", "int64", raw)
	}
	o.ID = value

	return nil
}

// bindIds binds and validates array parameter Ids from query.
//
// Arrays are parsed according to CollectionFormat: "csv" (defaults to "csv" when empty).
func (o *DeleteListItemsParams) bindIds(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("ids", "query", rawData)
	}
	var qvIds string
	if len(rawData) > 0 {
		qvIds = rawData[len(rawData)-1]
	}

	// CollectionFormat: csv
	idsIC := swag.SplitByFormat(qvIds, "csv")
	if len(idsIC) == 0 {
		return errors.Required("ids", "query", idsIC)
	}

	var idsIR []int64
	for i, idsIV := range idsIC {
		idsI, err := swag.ConvertInt64(idsIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "ids", i), "query", "int64", idsI)
		}

		idsIR = append(idsIR, idsI)
	}

	o.Ids = idsIR

	return nil
}

// bindRev binds and validates parameter Rev from query.
func (o *DeleteListItemsParams) bindRev(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("rev", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("rev", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("rev", "query", "int64", raw)
	}
	o.Rev = value

	return nil
}
