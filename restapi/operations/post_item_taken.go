// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/xopoww/wishes/restapi/apimodels"
)

// PostItemTakenHandlerFunc turns a function with the right signature into a post item taken handler
type PostItemTakenHandlerFunc func(PostItemTakenParams, *apimodels.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn PostItemTakenHandlerFunc) Handle(params PostItemTakenParams, principal *apimodels.Principal) middleware.Responder {
	return fn(params, principal)
}

// PostItemTakenHandler interface for that can handle valid post item taken params
type PostItemTakenHandler interface {
	Handle(PostItemTakenParams, *apimodels.Principal) middleware.Responder
}

// NewPostItemTaken creates a new http.Handler for the post item taken operation
func NewPostItemTaken(ctx *middleware.Context, handler PostItemTakenHandler) *PostItemTaken {
	return &PostItemTaken{Context: ctx, Handler: handler}
}

/*
	PostItemTaken swagger:route POST /lists/{id}/items/{item_id}/taken_by postItemTaken

Mark list item as taken
*/
type PostItemTaken struct {
	Context *middleware.Context
	Handler PostItemTakenHandler
}

func (o *PostItemTaken) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostItemTakenParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *apimodels.Principal
	if uprinc != nil {
		principal = uprinc.(*apimodels.Principal) // this is really a apimodels.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostItemTakenConflictBody post item taken conflict body
//
// swagger:model PostItemTakenConflictBody
type PostItemTakenConflictBody struct {

	// reason
	// Required: true
	// Enum: [outdated revision already taken]
	Reason *string `json:"reason"`

	// taken by
	TakenBy int64 `json:"taken_by,omitempty"`
}

// Validate validates this post item taken conflict body
func (o *PostItemTakenConflictBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postItemTakenConflictBodyTypeReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["outdated revision","already taken"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postItemTakenConflictBodyTypeReasonPropEnum = append(postItemTakenConflictBodyTypeReasonPropEnum, v)
	}
}

const (

	// PostItemTakenConflictBodyReasonOutdatedRevision captures enum value "outdated revision"
	PostItemTakenConflictBodyReasonOutdatedRevision string = "outdated revision"

	// PostItemTakenConflictBodyReasonAlreadyTaken captures enum value "already taken"
	PostItemTakenConflictBodyReasonAlreadyTaken string = "already taken"
)

// prop value enum
func (o *PostItemTakenConflictBody) validateReasonEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, postItemTakenConflictBodyTypeReasonPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PostItemTakenConflictBody) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("postItemTakenConflict"+"."+"reason", "body", o.Reason); err != nil {
		return err
	}

	// value enum
	if err := o.validateReasonEnum("postItemTakenConflict"+"."+"reason", "body", *o.Reason); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post item taken conflict body based on context it is used
func (o *PostItemTakenConflictBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostItemTakenConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostItemTakenConflictBody) UnmarshalBinary(b []byte) error {
	var res PostItemTakenConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostItemTakenInternalServerErrorBody post item taken internal server error body
//
// swagger:model PostItemTakenInternalServerErrorBody
type PostItemTakenInternalServerErrorBody struct {

	// error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this post item taken internal server error body
func (o *PostItemTakenInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostItemTakenInternalServerErrorBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("postItemTakenInternalServerError"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post item taken internal server error body based on context it is used
func (o *PostItemTakenInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostItemTakenInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostItemTakenInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PostItemTakenInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
