// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/xopoww/wishes/restapi/apimodels"
)

// PatchListHandlerFunc turns a function with the right signature into a patch list handler
type PatchListHandlerFunc func(PatchListParams, *apimodels.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchListHandlerFunc) Handle(params PatchListParams, principal *apimodels.Principal) middleware.Responder {
	return fn(params, principal)
}

// PatchListHandler interface for that can handle valid patch list params
type PatchListHandler interface {
	Handle(PatchListParams, *apimodels.Principal) middleware.Responder
}

// NewPatchList creates a new http.Handler for the patch list operation
func NewPatchList(ctx *middleware.Context, handler PatchListHandler) *PatchList {
	return &PatchList{Context: ctx, Handler: handler}
}

/*
	PatchList swagger:route PATCH /lists/{id} patchList

Edit existing list
*/
type PatchList struct {
	Context *middleware.Context
	Handler PatchListHandler
}

func (o *PatchList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPatchListParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *apimodels.Principal
	if uprinc != nil {
		principal = uprinc.(*apimodels.Principal) // this is really a apimodels.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PatchListBody patch list body
//
// swagger:model PatchListBody
type PatchListBody struct {
	apimodels.List

	apimodels.ListItems
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatchListBody) UnmarshalJSON(raw []byte) error {
	// PatchListParamsBodyAO0
	var patchListParamsBodyAO0 apimodels.List
	if err := swag.ReadJSON(raw, &patchListParamsBodyAO0); err != nil {
		return err
	}
	o.List = patchListParamsBodyAO0

	// PatchListParamsBodyAO1
	var patchListParamsBodyAO1 apimodels.ListItems
	if err := swag.ReadJSON(raw, &patchListParamsBodyAO1); err != nil {
		return err
	}
	o.ListItems = patchListParamsBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatchListBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	patchListParamsBodyAO0, err := swag.WriteJSON(o.List)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patchListParamsBodyAO0)

	patchListParamsBodyAO1, err := swag.WriteJSON(o.ListItems)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patchListParamsBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patch list body
func (o *PatchListBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with apimodels.List
	if err := o.List.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with apimodels.ListItems
	if err := o.ListItems.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this patch list body based on the context it is used
func (o *PatchListBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with apimodels.List
	if err := o.List.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with apimodels.ListItems
	if err := o.ListItems.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PatchListBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchListBody) UnmarshalBinary(b []byte) error {
	var res PatchListBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatchListInternalServerErrorBody patch list internal server error body
//
// swagger:model PatchListInternalServerErrorBody
type PatchListInternalServerErrorBody struct {

	// error
	// Required: true
	Error *string `json:"error"`
}

// Validate validates this patch list internal server error body
func (o *PatchListInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchListInternalServerErrorBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("patchListInternalServerError"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this patch list internal server error body based on context it is used
func (o *PatchListInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchListInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchListInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PatchListInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
