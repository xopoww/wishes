swagger: '2.0'

info:
  title: Wishes API
  version: 0.0.7

basePath: /api

securityDefinitions:
  KeySecurity:
    type: apiKey
    in: header
    name: x-token

consumes:
- "application/json"
produces:
- "application/json"

security:
- KeySecurity: []

paths:
  /login:
    post:
      description: Return api token for authorized User
      operationId: Login
      security: []
      parameters:
      - name: credentials
        in: body
        required: true
        schema:
          $ref: '#/definitions/UserCredentials'
      responses:
        200:
          description: Login result
          schema:
            type: object
            required: [ok]
            properties:
              ok:
                type: boolean
              token:
                type: string
        500:
          $ref: "#/responses/ServerError"

  /users:
    post:
      summary: Register new user
      operationId: Register
      security: []
      parameters:
      - name: credentials
        in: body
        required: true
        schema:
          $ref: "#/definitions/UserCredentials"
      responses:
        200:
          description: Registration result
          schema:
            type: object
            required: [ok]
            properties:
              ok:
                type: boolean
              error:
                type: string
              user:
                $ref: "#/definitions/ID"
        500:
          $ref: "#/responses/ServerError"

  /users/{id}:
    parameters:
    - $ref: "#/parameters/PathId"
    get:
      summary: Get user info
      operationId: GetUser
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
        404:
          description: User not found
        500:
          $ref: "#/responses/ServerError"
    patch:
      summary: Edit user info
      operationId: PatchUser
      parameters:
      - name: user
        in: body
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        204:
          description: Success
        403:
          description: Access denied
        500:
          $ref: "#/responses/ServerError"

  /lists:
    get:
      operationId: GetUserLists
      summary: Get user list IDs (visible by client)
      parameters:
      - name: UserID
        in: query
        type: integer
        required: false
        description: ID of user in question. If empty, client ID is used.
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              type: integer
            uniqueItems: true
        404:
          description: User not found
        500:
          $ref: "#/responses/ServerError"
    post:
        summary: Create new list
        operationId: PostList
        parameters:
        - name: list
          in: body
          required: true
          schema:
            allOf:
            - $ref: "#/definitions/List"
            - type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: "#/definitions/ListItem"
        responses:
          201:
            description: Success
            schema:
              allOf:
              - $ref: "#/definitions/Revision"
              - $ref: "#/definitions/ID"
          500:
            $ref: "#/responses/ServerError"

  /lists/{id}:
    parameters:
    - $ref: "#/parameters/PathId"
    get:
      parameters:
      - $ref: "#/parameters/AccessToken"
      summary: Get list info (title, etc)
      operationId: GetList
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/List"
        403:
          description: Access denied
        404:
          description: List not found
        500:
          $ref: "#/responses/ServerError"
    patch:
      summary: Edit existing list (not list items)
      operationId: PatchList
      parameters:
      - name: list
        in: body
        schema:
          allOf:
           - $ref: "#/definitions/List"
        required: true
      responses:
        204:
          description: Success
        403:
          description: Access denied
        404:
          description: List not found
        500:
          $ref: "#/responses/ServerError"
    delete:
      summary: Delete existing list
      operationId: DeleteList
      responses:
        204:
          description: Success
        403:
          description: Access denied
        404:
          description: List not found
        500:
          $ref: "#/responses/ServerError"

  /lists/{id}/items:
    parameters:
    - $ref: "#/parameters/PathId"
    get:
      parameters:
      - $ref: "#/parameters/AccessToken"
      summary: Get list items
      operationId: GetListItems
      responses:
        200:
          description: Success
          schema:
            allOf:
            - $ref: "#/definitions/Revision"
            - type: object
              properties:
                items:
                  type: array
                  items:
                    allOf:
                    - $ref: "#/definitions/ID"
                    - $ref: "#/definitions/ListItem"
        403:
          description: Access denied
        404:
          description: List not found
        500:
          $ref: "#/responses/ServerError"
    post:
      summary: Add items to existing list
      operationId: PostListItems
      parameters:
      - name: items
        in: body
        schema:
          allOf:
          - $ref: "#/definitions/Revision"
          - type: object
            properties:
              items:
                type: array
                items:
                  $ref: "#/definitions/ListItem"
            required: [items]
      responses:
        201:
          description: Success
          schema:
            $ref: "#/definitions/Revision"
        409:
          description: Outdated revision
        403:
          description: Access denied
        404:
          description: List not found
        500:
          $ref: "#/responses/ServerError"
    delete:
      summary: Delete items from existing list
      operationId: DeleteListItems
      parameters:
      - name: rev
        in: query
        type: integer
        required: true
      - name: ids
        in: query
        type: array
        items:
          type: integer
        collectionFormat: csv
        required: true
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Revision"
        409:
          description: Outdated revision
        403:
          description: Access denied
        404:
          description: List not found
        500:
          $ref: "#/responses/ServerError"

  /lists/{id}/token:
    parameters:
      - $ref: "#/parameters/PathId"
    get:
      operationId: GetListToken
      summary: Get access token for a list
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              token:
                type: string
        403:
          description: Access denied
        404:
          description: List not found
        500:
          $ref: "#/responses/ServerError"
      
parameters:
  PathId:
    name: id
    in: path
    required: true
    type: integer

  AccessToken:
    name: accessToken
    in: query
    required: false
    type: string
    description: Optional access token for a list provided by list owner

responses:
  ServerError:
    description: Server error
    schema:
      type: object
      properties:
        error:
          type: string
      required: [error]

definitions:

  principal:
    type: object
    properties:
      username:
        type: string
      id:
        type: integer
  

  Revision:
    type: object
    properties:
      rev:
        type: integer
    required: [rev]


  ID:
    type: object
    properties:
      id:
        type: integer
    required: [id]


  User:
    allOf:
      - type: object
        properties:
          username:
            $ref: "#/definitions/UserName"
      - $ref: "#/definitions/UserInfo"

  UserInfo:
    type: object
    properties:
      fname:
        type: string
      lname:
        type: string
    required: [fname,lname]

  UserName:
    type: string
    minLength: 3
    maxLength: 20

  UserCredentials:
    type: object
    required: [username, password]
    properties:
      username:
        $ref: "#/definitions/UserName"
      password:
        type: string
        format: password
        minLength: 8
        maxLength: 50
      
  List:
    type: object
    properties:
      title:
        type: string
        minLength: 1
      ownerID:
        type: integer
      access:
        type: string
        enum: [private, link, public]
    required: [title, access]
  
  ListItem:
    type: object
    properties:
      title:
        type: string
        minLength: 1
      desc:
        type: string
      taken_by:
        type: integer
    required: [title]