swagger: '2.0'

info:
  title: Wishes API
  version: 0.0.4

basePath: /api

securityDefinitions:
  KeySecurity:
    type: apiKey
    in: header
    name: x-token

consumes:
  - "application/json"
produces:
  - "application/json"

security:
  - KeySecurity: []

paths:
  /login:
    post:
      description: Return api token for authorized User
      operationId: Login
      security: []
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserCredentials'
      responses:
        200:
          description: Login result
          schema:
            type: object
            required: [ok]
            properties:
              ok:
                type: boolean
              token:
                type: string
        500:
          $ref: "#/responses/ServerError"

  /users:
    post:
      summary: Register new user
      operationId: Register
      security: []
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            $ref: "#/definitions/UserCredentials"
      responses:
        200:
          description: Registration result
          schema:
            type: object
            required: [ok]
            properties:
              ok:
                type: boolean
              error:
                type: string
              user:
                $ref: "#/definitions/ID"
        500:
          $ref: "#/responses/ServerError"

  /users/{id}:
    parameters:
      - $ref: "#/parameters/PathId"
    get:
      summary: Get user info
      operationId: GetUser
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
        404:
          description: User not found
        500:
          $ref: "#/responses/ServerError"
    patch:
      summary: Edit user info
      operationId: PatchUser
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: "#/definitions/UserInfo"
      responses:
        200:
          description: Success
        403:
          description: Access denied
        500:
          $ref: "#/responses/ServerError"

  /users/{id}/lists:
    parameters:
      - $ref: "#/parameters/PathId"
    get:
      operationId: GetUserLists
      summary: Get user list ids (visible by client)
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              type: integer
            uniqueItems: true
        404:
          description: User not found
        500:
          $ref: "#/responses/ServerError"

  /lists/{id}:
    parameters:
      - $ref: "#/parameters/PathId"
    get:
      summary: Get list info
      operationId: GetList
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/List"
        403:
          description: Access denied
        404:
          description: List not found
        500:
          $ref: "#/responses/ServerError"
    patch:
      summary: Edit existing list
      operationId: PatchList
      parameters:
        - name: list
          in: body
          schema:
            $ref: "#/definitions/List"
          required: true
      responses:
        200:
          description: Success
        403:
          description: Access denied
        404:
          description: List not found
        500:
          $ref: "#/responses/ServerError"
    delete:
      summary: Delete existing list
      operationId: DeleteList
      responses:
        200:
          description: Success
        403:
          description: Access denied
        404:
          description: List not found
        500:
          $ref: "#/responses/ServerError"

  /lists:
    post:
        summary: Create new list
        operationId: PostList
        parameters:
          - name: list
            in: body
            schema:
              $ref: "#/definitions/List"
            required: true
        responses:
          201:
            description: Success
            schema:
              $ref: "#/definitions/ID"
          500:
            $ref: "#/responses/ServerError"
      
parameters:
  PathId:
    name: id
    in: path
    required: true
    type: integer

responses:
  ServerError:
    description: Server error
    schema:
      type: object
      properties:
        error:
          type: string
      required: [error]

definitions:

  principal:
    type: string


  ID:
    type: object
    properties:
      id:
        type: integer
    required: [id]


  UserName:
    type: string

  UserInfo:
    type: object
    properties:
      fname:
        type: string
      lname:
        type: string
    required: [fname,lname]

  User:
    allOf:
      - $ref: "#/definitions/ID"
      - type: object
        properties:
          username:
            $ref: "#/definitions/UserName"
      - $ref: "#/definitions/UserInfo"

  UserCredentials:
    type: object
    required: [username, password]
    properties:
      username:
        $ref: "#/definitions/UserName"
      password:
        type: string
        format: password
      

  List:
    type: object
    properties:
      title:
        type: string
      items:
        type: array
        items:
          $ref: "#/definitions/ListItem"
  
  ListItem:
    type: object
    properties:
      title:
        type: string
      desc:
        type: string
    required: [title]