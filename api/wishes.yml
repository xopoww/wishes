swagger: '2.0'

info:
  title: Wishes API
  version: 0.0.2

basePath: /api

securityDefinitions:
  KeySecurity:
    type: apiKey
    in: header
    name: x-token

consumes:
  - "application/json"
produces:
  - "application/json"

security:
  - KeySecurity: []

paths:
  /login:
    post:
      description: Return api token for authorized User
      operationId: Login
      security: []
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserCredentials'
      responses:
        200:
          description: Login result
          schema:
            type: object
            required: [ok]
            properties:
              ok:
                type: boolean
              token:
                type: string
        500:
          $ref: "#/responses/ServerError"

  /user:
    get:
      summary: Get user info
      parameters:
        - name: username
          in: query
          type: string
          required: true
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/UserInfo"
        404:
          description: User not found
        500:
          $ref: "#/responses/ServerError"
    patch:
      summary: Edit user info
      parameters:
        - name: user
          in: body
          required: true
          schema:
            type: object
            properties:
              username:
                $ref: "#/definitions/UserName"
              info:
                $ref: "#/definitions/UserInfo"
            required: [username, info]
      responses:
        200:
          description: Success
        404:
          description: User not found
        403:
          description: Access denied
        500:
          $ref: "#/responses/ServerError"
    post:
      summary: Register new user
      security: []
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            $ref: "#/definitions/UserCredentials"
      responses:
        200:
          description: Registration result
          schema:
            type: object
            required: [ok]
            properties:
              ok:
                type: boolean
              error:
                type: string
        500:
          $ref: "#/responses/ServerError"

responses:
  ServerError:
    description: Server error
    schema:
      type: object
      properties:
        error:
          type: string
      required: [error]

definitions:

  UserName:
    type: string

  UserInfo:
    type: object
    properties:
      fname:
        type: string
      lname:
        type: string

  UserCredentials:
    type: object
    required: [username, password]
    properties:
      username:
        $ref: "#/definitions/UserName"
      password:
        type: string
        format: password

  principal:
    type: string
      
