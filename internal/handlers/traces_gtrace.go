// Code generated by gtrace. DO NOT EDIT.

package handlers

import (
	"github.com/xopoww/wishes/models"
)

// Compose returns a new Trace which has functional fields composed
// both from t and x.
func (t Trace) Compose(x Trace) (ret Trace) {
	switch {
	case t.OnLogin == nil:
		ret.OnLogin = x.OnLogin
	case x.OnLogin == nil:
		ret.OnLogin = t.OnLogin
	default:
		h1 := t.OnLogin
		h2 := x.OnLogin
		ret.OnLogin = func(o OnLoginStartInfo) func(OnLoginDoneInfo) {
			r1 := h1(o)
			r2 := h2(o)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(o OnLoginDoneInfo) {
					r1(o)
					r2(o)
				}
			}
		}
	}
	switch {
	case t.OnGetUser == nil:
		ret.OnGetUser = x.OnGetUser
	case x.OnGetUser == nil:
		ret.OnGetUser = t.OnGetUser
	default:
		h1 := t.OnGetUser
		h2 := x.OnGetUser
		ret.OnGetUser = func(o OnGetUserStartInfo) func(OnGetUserDoneInfo) {
			r1 := h1(o)
			r2 := h2(o)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(o OnGetUserDoneInfo) {
					r1(o)
					r2(o)
				}
			}
		}
	}
	switch {
	case t.OnPatchUser == nil:
		ret.OnPatchUser = x.OnPatchUser
	case x.OnPatchUser == nil:
		ret.OnPatchUser = t.OnPatchUser
	default:
		h1 := t.OnPatchUser
		h2 := x.OnPatchUser
		ret.OnPatchUser = func(o OnPatchUserStartInfo) func(OnPatchUserDoneInfo) {
			r1 := h1(o)
			r2 := h2(o)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(o OnPatchUserDoneInfo) {
					r1(o)
					r2(o)
				}
			}
		}
	}
	switch {
	case t.OnPostUser == nil:
		ret.OnPostUser = x.OnPostUser
	case x.OnPostUser == nil:
		ret.OnPostUser = t.OnPostUser
	default:
		h1 := t.OnPostUser
		h2 := x.OnPostUser
		ret.OnPostUser = func(o OnPostUserStartInfo) func(OnPostUserDoneInfo) {
			r1 := h1(o)
			r2 := h2(o)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(o OnPostUserDoneInfo) {
					r1(o)
					r2(o)
				}
			}
		}
	}
	switch {
	case t.OnKeySecurityAuth == nil:
		ret.OnKeySecurityAuth = x.OnKeySecurityAuth
	case x.OnKeySecurityAuth == nil:
		ret.OnKeySecurityAuth = t.OnKeySecurityAuth
	default:
		h1 := t.OnKeySecurityAuth
		h2 := x.OnKeySecurityAuth
		ret.OnKeySecurityAuth = func(o OnKeySecurityAuthStartInfo) func(OnKeySecurityAuthDoneInfo) {
			r1 := h1(o)
			r2 := h2(o)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(o OnKeySecurityAuthDoneInfo) {
					r1(o)
					r2(o)
				}
			}
		}
	}
	return ret
}
func (t Trace) onLogin(o OnLoginStartInfo) func(OnLoginDoneInfo) {
	fn := t.OnLogin
	if fn == nil {
		return func(OnLoginDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnLoginDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onGetUser(o OnGetUserStartInfo) func(OnGetUserDoneInfo) {
	fn := t.OnGetUser
	if fn == nil {
		return func(OnGetUserDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnGetUserDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onPatchUser(o OnPatchUserStartInfo) func(OnPatchUserDoneInfo) {
	fn := t.OnPatchUser
	if fn == nil {
		return func(OnPatchUserDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnPatchUserDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onPostUser(o OnPostUserStartInfo) func(OnPostUserDoneInfo) {
	fn := t.OnPostUser
	if fn == nil {
		return func(OnPostUserDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnPostUserDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onKeySecurityAuth(o OnKeySecurityAuthStartInfo) func(OnKeySecurityAuthDoneInfo) {
	fn := t.OnKeySecurityAuth
	if fn == nil {
		return func(OnKeySecurityAuthDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnKeySecurityAuthDoneInfo) {
			return
		}
	}
	return res
}
func traceOnLogin(t Trace, username string) func(ok bool, _ error) {
	var p OnLoginStartInfo
	p.Username = username
	res := t.onLogin(p)
	return func(ok bool, e error) {
		var p OnLoginDoneInfo
		p.Ok = ok
		p.Error = e
		res(p)
	}
}
func traceOnGetUser(t Trace, userID int, p *models.Principal) func(*models.User, error) {
	var p1 OnGetUserStartInfo
	p1.UserID = userID
	p1.Principal = p
	res := t.onGetUser(p1)
	return func(u *models.User, e error) {
		var p OnGetUserDoneInfo
		p.User = u
		p.Error = e
		res(p)
	}
}
func traceOnPatchUser(t Trace, i models.ID, info models.UserInfo, p *models.Principal) func(error) {
	var p1 OnPatchUserStartInfo
	p1.ID = i
	p1.Info = info
	p1.Principal = p
	res := t.onPatchUser(p1)
	return func(e error) {
		var p OnPatchUserDoneInfo
		p.Error = e
		res(p)
	}
}
func traceOnPostUser(t Trace, username string) func(ok bool, _ error) {
	var p OnPostUserStartInfo
	p.Username = username
	res := t.onPostUser(p)
	return func(ok bool, e error) {
		var p OnPostUserDoneInfo
		p.Ok = ok
		p.Error = e
		res(p)
	}
}
func traceOnKeySecurityAuth(t Trace) func(_ *models.Principal, err error) {
	var p OnKeySecurityAuthStartInfo
	res := t.onKeySecurityAuth(p)
	return func(p *models.Principal, err error) {
		var p1 OnKeySecurityAuthDoneInfo
		p1.Principal = p
		p1.Err = err
		res(p1)
	}
}
