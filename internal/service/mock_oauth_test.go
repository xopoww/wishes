// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xopoww/wishes/internal/service (interfaces: OAuthProvider)

// Package service_test is a generated GoMock package.
package service_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOAuthProvider is a mock of OAuthProvider interface.
type MockOAuthProvider struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthProviderMockRecorder
}

// MockOAuthProviderMockRecorder is the mock recorder for MockOAuthProvider.
type MockOAuthProviderMockRecorder struct {
	mock *MockOAuthProvider
}

// NewMockOAuthProvider creates a new mock instance.
func NewMockOAuthProvider(ctrl *gomock.Controller) *MockOAuthProvider {
	mock := &MockOAuthProvider{ctrl: ctrl}
	mock.recorder = &MockOAuthProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthProvider) EXPECT() *MockOAuthProviderMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockOAuthProvider) Validate(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockOAuthProviderMockRecorder) Validate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockOAuthProvider)(nil).Validate), arg0, arg1)
}
