// Code generated by gtrace. DO NOT EDIT.

package handlers

import (
	"github.com/xopoww/wishes/internal/models"
)

// Compose returns a new Trace which has functional fields composed
// both from t and x.
func (t Trace) Compose(x Trace) (ret Trace) {
	switch {
	case t.OnLogin == nil:
		ret.OnLogin = x.OnLogin
	case x.OnLogin == nil:
		ret.OnLogin = t.OnLogin
	default:
		h1 := t.OnLogin
		h2 := x.OnLogin
		ret.OnLogin = func(o OnLoginStartInfo) func(OnLoginDoneInfo) {
			r1 := h1(o)
			r2 := h2(o)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(o OnLoginDoneInfo) {
					r1(o)
					r2(o)
				}
			}
		}
	}
	switch {
	case t.OnGetUser == nil:
		ret.OnGetUser = x.OnGetUser
	case x.OnGetUser == nil:
		ret.OnGetUser = t.OnGetUser
	default:
		h1 := t.OnGetUser
		h2 := x.OnGetUser
		ret.OnGetUser = func(o OnGetUserStartInfo) func(OnGetUserDoneInfo) {
			r1 := h1(o)
			r2 := h2(o)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(o OnGetUserDoneInfo) {
					r1(o)
					r2(o)
				}
			}
		}
	}
	switch {
	case t.OnPatchUser == nil:
		ret.OnPatchUser = x.OnPatchUser
	case x.OnPatchUser == nil:
		ret.OnPatchUser = t.OnPatchUser
	default:
		h1 := t.OnPatchUser
		h2 := x.OnPatchUser
		ret.OnPatchUser = func(o OnPatchUserStartInfo) func(OnPatchUserDoneInfo) {
			r1 := h1(o)
			r2 := h2(o)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(o OnPatchUserDoneInfo) {
					r1(o)
					r2(o)
				}
			}
		}
	}
	switch {
	case t.OnRegister == nil:
		ret.OnRegister = x.OnRegister
	case x.OnRegister == nil:
		ret.OnRegister = t.OnRegister
	default:
		h1 := t.OnRegister
		h2 := x.OnRegister
		ret.OnRegister = func(o OnRegisterStartInfo) func(OnRegisterDoneInfo) {
			r1 := h1(o)
			r2 := h2(o)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(o OnRegisterDoneInfo) {
					r1(o)
					r2(o)
				}
			}
		}
	}
	switch {
	case t.OnGetList == nil:
		ret.OnGetList = x.OnGetList
	case x.OnGetList == nil:
		ret.OnGetList = t.OnGetList
	default:
		h1 := t.OnGetList
		h2 := x.OnGetList
		ret.OnGetList = func(o OnGetListStartInfo) func(OnGetListDoneInfo) {
			r1 := h1(o)
			r2 := h2(o)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(o OnGetListDoneInfo) {
					r1(o)
					r2(o)
				}
			}
		}
	}
	switch {
	case t.OnGetListItems == nil:
		ret.OnGetListItems = x.OnGetListItems
	case x.OnGetListItems == nil:
		ret.OnGetListItems = t.OnGetListItems
	default:
		h1 := t.OnGetListItems
		h2 := x.OnGetListItems
		ret.OnGetListItems = func(o OnGetListItemsStartInfo) func(OnGetListItemsDoneInfo) {
			r1 := h1(o)
			r2 := h2(o)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(o OnGetListItemsDoneInfo) {
					r1(o)
					r2(o)
				}
			}
		}
	}
	switch {
	case t.OnPostList == nil:
		ret.OnPostList = x.OnPostList
	case x.OnPostList == nil:
		ret.OnPostList = t.OnPostList
	default:
		h1 := t.OnPostList
		h2 := x.OnPostList
		ret.OnPostList = func(o OnPostListStartInfo) func(OnPostListDoneInfo) {
			r1 := h1(o)
			r2 := h2(o)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(o OnPostListDoneInfo) {
					r1(o)
					r2(o)
				}
			}
		}
	}
	switch {
	case t.OnPostListItems == nil:
		ret.OnPostListItems = x.OnPostListItems
	case x.OnPostListItems == nil:
		ret.OnPostListItems = t.OnPostListItems
	default:
		h1 := t.OnPostListItems
		h2 := x.OnPostListItems
		ret.OnPostListItems = func(o OnPostListItemsStartInfo) func(OnPostListItemsDoneInfo) {
			r1 := h1(o)
			r2 := h2(o)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(o OnPostListItemsDoneInfo) {
					r1(o)
					r2(o)
				}
			}
		}
	}
	switch {
	case t.OnPatchList == nil:
		ret.OnPatchList = x.OnPatchList
	case x.OnPatchList == nil:
		ret.OnPatchList = t.OnPatchList
	default:
		h1 := t.OnPatchList
		h2 := x.OnPatchList
		ret.OnPatchList = func(o OnPatchListStartInfo) func(OnPatchListDoneInfo) {
			r1 := h1(o)
			r2 := h2(o)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(o OnPatchListDoneInfo) {
					r1(o)
					r2(o)
				}
			}
		}
	}
	switch {
	case t.OnDeleteList == nil:
		ret.OnDeleteList = x.OnDeleteList
	case x.OnDeleteList == nil:
		ret.OnDeleteList = t.OnDeleteList
	default:
		h1 := t.OnDeleteList
		h2 := x.OnDeleteList
		ret.OnDeleteList = func(o OnDeleteListStartInfo) func(OnDeleteListDoneInfo) {
			r1 := h1(o)
			r2 := h2(o)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(o OnDeleteListDoneInfo) {
					r1(o)
					r2(o)
				}
			}
		}
	}
	switch {
	case t.OnDeleteListItems == nil:
		ret.OnDeleteListItems = x.OnDeleteListItems
	case x.OnDeleteListItems == nil:
		ret.OnDeleteListItems = t.OnDeleteListItems
	default:
		h1 := t.OnDeleteListItems
		h2 := x.OnDeleteListItems
		ret.OnDeleteListItems = func(o OnDeleteListItemsStartInfo) func(OnDeleteListItemsDoneInfo) {
			r1 := h1(o)
			r2 := h2(o)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(o OnDeleteListItemsDoneInfo) {
					r1(o)
					r2(o)
				}
			}
		}
	}
	switch {
	case t.OnGetUserLists == nil:
		ret.OnGetUserLists = x.OnGetUserLists
	case x.OnGetUserLists == nil:
		ret.OnGetUserLists = t.OnGetUserLists
	default:
		h1 := t.OnGetUserLists
		h2 := x.OnGetUserLists
		ret.OnGetUserLists = func(o OnGetUserListsStartInfo) func(OnGetUserListsDoneInfo) {
			r1 := h1(o)
			r2 := h2(o)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(o OnGetUserListsDoneInfo) {
					r1(o)
					r2(o)
				}
			}
		}
	}
	switch {
	case t.OnGetListToken == nil:
		ret.OnGetListToken = x.OnGetListToken
	case x.OnGetListToken == nil:
		ret.OnGetListToken = t.OnGetListToken
	default:
		h1 := t.OnGetListToken
		h2 := x.OnGetListToken
		ret.OnGetListToken = func(o OnGetListTokenStartInfo) func(OnGetListTokenDoneInfo) {
			r1 := h1(o)
			r2 := h2(o)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(o OnGetListTokenDoneInfo) {
					r1(o)
					r2(o)
				}
			}
		}
	}
	switch {
	case t.OnPostItemTaken == nil:
		ret.OnPostItemTaken = x.OnPostItemTaken
	case x.OnPostItemTaken == nil:
		ret.OnPostItemTaken = t.OnPostItemTaken
	default:
		h1 := t.OnPostItemTaken
		h2 := x.OnPostItemTaken
		ret.OnPostItemTaken = func(o OnPostItemTakenStartInfo) func(OnPostItemTakenDoneInfo) {
			r1 := h1(o)
			r2 := h2(o)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(o OnPostItemTakenDoneInfo) {
					r1(o)
					r2(o)
				}
			}
		}
	}
	switch {
	case t.OnDeleteItemTaken == nil:
		ret.OnDeleteItemTaken = x.OnDeleteItemTaken
	case x.OnDeleteItemTaken == nil:
		ret.OnDeleteItemTaken = t.OnDeleteItemTaken
	default:
		h1 := t.OnDeleteItemTaken
		h2 := x.OnDeleteItemTaken
		ret.OnDeleteItemTaken = func(o OnDeleteItemTakenStartInfo) func(OnDeleteItemTakenDoneInfo) {
			r1 := h1(o)
			r2 := h2(o)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(o OnDeleteItemTakenDoneInfo) {
					r1(o)
					r2(o)
				}
			}
		}
	}
	switch {
	case t.OnKeySecurityAuth == nil:
		ret.OnKeySecurityAuth = x.OnKeySecurityAuth
	case x.OnKeySecurityAuth == nil:
		ret.OnKeySecurityAuth = t.OnKeySecurityAuth
	default:
		h1 := t.OnKeySecurityAuth
		h2 := x.OnKeySecurityAuth
		ret.OnKeySecurityAuth = func(o OnKeySecurityAuthStartInfo) func(OnKeySecurityAuthDoneInfo) {
			r1 := h1(o)
			r2 := h2(o)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(o OnKeySecurityAuthDoneInfo) {
					r1(o)
					r2(o)
				}
			}
		}
	}
	return ret
}
func (t Trace) onLogin(o OnLoginStartInfo) func(OnLoginDoneInfo) {
	fn := t.OnLogin
	if fn == nil {
		return func(OnLoginDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnLoginDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onGetUser(o OnGetUserStartInfo) func(OnGetUserDoneInfo) {
	fn := t.OnGetUser
	if fn == nil {
		return func(OnGetUserDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnGetUserDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onPatchUser(o OnPatchUserStartInfo) func(OnPatchUserDoneInfo) {
	fn := t.OnPatchUser
	if fn == nil {
		return func(OnPatchUserDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnPatchUserDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onRegister(o OnRegisterStartInfo) func(OnRegisterDoneInfo) {
	fn := t.OnRegister
	if fn == nil {
		return func(OnRegisterDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnRegisterDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onGetList(o OnGetListStartInfo) func(OnGetListDoneInfo) {
	fn := t.OnGetList
	if fn == nil {
		return func(OnGetListDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnGetListDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onGetListItems(o OnGetListItemsStartInfo) func(OnGetListItemsDoneInfo) {
	fn := t.OnGetListItems
	if fn == nil {
		return func(OnGetListItemsDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnGetListItemsDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onPostList(o OnPostListStartInfo) func(OnPostListDoneInfo) {
	fn := t.OnPostList
	if fn == nil {
		return func(OnPostListDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnPostListDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onPostListItems(o OnPostListItemsStartInfo) func(OnPostListItemsDoneInfo) {
	fn := t.OnPostListItems
	if fn == nil {
		return func(OnPostListItemsDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnPostListItemsDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onPatchList(o OnPatchListStartInfo) func(OnPatchListDoneInfo) {
	fn := t.OnPatchList
	if fn == nil {
		return func(OnPatchListDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnPatchListDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onDeleteList(o OnDeleteListStartInfo) func(OnDeleteListDoneInfo) {
	fn := t.OnDeleteList
	if fn == nil {
		return func(OnDeleteListDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnDeleteListDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onDeleteListItems(o OnDeleteListItemsStartInfo) func(OnDeleteListItemsDoneInfo) {
	fn := t.OnDeleteListItems
	if fn == nil {
		return func(OnDeleteListItemsDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnDeleteListItemsDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onGetUserLists(o OnGetUserListsStartInfo) func(OnGetUserListsDoneInfo) {
	fn := t.OnGetUserLists
	if fn == nil {
		return func(OnGetUserListsDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnGetUserListsDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onGetListToken(o OnGetListTokenStartInfo) func(OnGetListTokenDoneInfo) {
	fn := t.OnGetListToken
	if fn == nil {
		return func(OnGetListTokenDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnGetListTokenDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onPostItemTaken(o OnPostItemTakenStartInfo) func(OnPostItemTakenDoneInfo) {
	fn := t.OnPostItemTaken
	if fn == nil {
		return func(OnPostItemTakenDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnPostItemTakenDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onDeleteItemTaken(o OnDeleteItemTakenStartInfo) func(OnDeleteItemTakenDoneInfo) {
	fn := t.OnDeleteItemTaken
	if fn == nil {
		return func(OnDeleteItemTakenDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnDeleteItemTakenDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onKeySecurityAuth(o OnKeySecurityAuthStartInfo) func(OnKeySecurityAuthDoneInfo) {
	fn := t.OnKeySecurityAuth
	if fn == nil {
		return func(OnKeySecurityAuthDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnKeySecurityAuthDoneInfo) {
			return
		}
	}
	return res
}
func traceOnLogin(t Trace, username string) func(ok bool, _ error) {
	var p OnLoginStartInfo
	p.Username = username
	res := t.onLogin(p)
	return func(ok bool, e error) {
		var p OnLoginDoneInfo
		p.Ok = ok
		p.Error = e
		res(p)
	}
}
func traceOnGetUser(t Trace, userID int64, client *models.User) func(*models.User, error) {
	var p OnGetUserStartInfo
	p.UserID = userID
	p.Client = client
	res := t.onGetUser(p)
	return func(u *models.User, e error) {
		var p OnGetUserDoneInfo
		p.User = u
		p.Error = e
		res(p)
	}
}
func traceOnPatchUser(t Trace, u *models.User, client *models.User) func(error) {
	var p OnPatchUserStartInfo
	p.User = u
	p.Client = client
	res := t.onPatchUser(p)
	return func(e error) {
		var p OnPatchUserDoneInfo
		p.Error = e
		res(p)
	}
}
func traceOnRegister(t Trace, username string) func(ok bool, _ error) {
	var p OnRegisterStartInfo
	p.Username = username
	res := t.onRegister(p)
	return func(ok bool, e error) {
		var p OnRegisterDoneInfo
		p.Ok = ok
		p.Error = e
		res(p)
	}
}
func traceOnGetList(t Trace, listID int64, client *models.User, token *string) func(*models.List, error) {
	var p OnGetListStartInfo
	p.ListID = listID
	p.Client = client
	p.Token = token
	res := t.onGetList(p)
	return func(l *models.List, e error) {
		var p OnGetListDoneInfo
		p.List = l
		p.Error = e
		res(p)
	}
}
func traceOnGetListItems(t Trace, listID int64, client *models.User, token *string) func(items []models.ListItem, _ error) {
	var p OnGetListItemsStartInfo
	p.ListID = listID
	p.Client = client
	p.Token = token
	res := t.onGetListItems(p)
	return func(items []models.ListItem, e error) {
		var p OnGetListItemsDoneInfo
		p.Items = items
		p.Error = e
		res(p)
	}
}
func traceOnPostList(t Trace, l *models.List, client *models.User) func(listID int64, _ error) {
	var p OnPostListStartInfo
	p.List = l
	p.Client = client
	res := t.onPostList(p)
	return func(listID int64, e error) {
		var p OnPostListDoneInfo
		p.ListID = listID
		p.Error = e
		res(p)
	}
}
func traceOnPostListItems(t Trace, l *models.List, items []models.ListItem, client *models.User) func(error) {
	var p OnPostListItemsStartInfo
	p.List = l
	p.Items = items
	p.Client = client
	res := t.onPostListItems(p)
	return func(e error) {
		var p OnPostListItemsDoneInfo
		p.Error = e
		res(p)
	}
}
func traceOnPatchList(t Trace, l *models.List, client *models.User) func(error) {
	var p OnPatchListStartInfo
	p.List = l
	p.Client = client
	res := t.onPatchList(p)
	return func(e error) {
		var p OnPatchListDoneInfo
		p.Error = e
		res(p)
	}
}
func traceOnDeleteList(t Trace, l *models.List, client *models.User) func(error) {
	var p OnDeleteListStartInfo
	p.List = l
	p.Client = client
	res := t.onDeleteList(p)
	return func(e error) {
		var p OnDeleteListDoneInfo
		p.Error = e
		res(p)
	}
}
func traceOnDeleteListItems(t Trace, l *models.List, itemIDs []int64, client *models.User) func(error) {
	var p OnDeleteListItemsStartInfo
	p.List = l
	p.ItemIDs = itemIDs
	p.Client = client
	res := t.onDeleteListItems(p)
	return func(e error) {
		var p OnDeleteListItemsDoneInfo
		p.Error = e
		res(p)
	}
}
func traceOnGetUserLists(t Trace, userID int64, client *models.User) func(listIDs []int64, _ error) {
	var p OnGetUserListsStartInfo
	p.UserID = userID
	p.Client = client
	res := t.onGetUserLists(p)
	return func(listIDs []int64, e error) {
		var p OnGetUserListsDoneInfo
		p.ListIDs = listIDs
		p.Error = e
		res(p)
	}
}
func traceOnGetListToken(t Trace, listID int64, client *models.User) func(error) {
	var p OnGetListTokenStartInfo
	p.ListID = listID
	p.Client = client
	res := t.onGetListToken(p)
	return func(e error) {
		var p OnGetListTokenDoneInfo
		p.Error = e
		res(p)
	}
}
func traceOnPostItemTaken(t Trace, l *models.List, itemID int64, client *models.User, token *string) func(error) {
	var p OnPostItemTakenStartInfo
	p.List = l
	p.ItemID = itemID
	p.Client = client
	p.Token = token
	res := t.onPostItemTaken(p)
	return func(e error) {
		var p OnPostItemTakenDoneInfo
		p.Error = e
		res(p)
	}
}
func traceOnDeleteItemTaken(t Trace, l *models.List, itemID int64, client *models.User, token *string) func(error) {
	var p OnDeleteItemTakenStartInfo
	p.List = l
	p.ItemID = itemID
	p.Client = client
	p.Token = token
	res := t.onDeleteItemTaken(p)
	return func(e error) {
		var p OnDeleteItemTakenDoneInfo
		p.Error = e
		res(p)
	}
}
func traceOnKeySecurityAuth(t Trace) func(client *models.User, err error) {
	var p OnKeySecurityAuthStartInfo
	res := t.onKeySecurityAuth(p)
	return func(client *models.User, err error) {
		var p OnKeySecurityAuthDoneInfo
		p.Client = client
		p.Err = err
		res(p)
	}
}
